generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BARBER
  CLIENT
  ATTENDANT
}

enum PaymentMethod {
  CASH
  PIX
  CREDIT_CARD
  DEBIT_CARD
}

enum TransactionType {
  ADDITION
  WITHDRAWAL
}

model User {
  id            String             @id @default(uuid())
  name          String
  email         String             @unique
  password      String
  active        Boolean            @default(false)
  profile       Profile?
  appointments  Appointment[]      @relation("ClientAppointments")
  sales         Sale[]
  transactions  Transaction[]
  sessions      CashRegisterSession[]
  createdAt     DateTime           @default(now())

  @@map("users")
}

model Profile {
  id              String           @id @default(uuid())
  phone           String
  cpf             String
  genre           String
  birthday        String
  pix             String
  role            Role             @default(CLIENT)
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  createdAt       DateTime         @default(now())

  @@map("profiles")
}

model Appointment {
  id          String   @id @default(uuid())
  clientId    String
  barberId    String
  serviceId   String
  date        DateTime
  hour        String

  client      User     @relation("ClientAppointments", fields: [clientId], references: [id])
  barber      User     @relation(fields: [barberId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])

  @@map("appointments")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  cost        Float
  price       Float
  isProduct   Boolean  @default(false)
  appointments Appointment[]
  saleItems   SaleItem[]

  @@map("services")
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  type        TransactionType
  description String
  amount      Float
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Sale {
  id          String   @id @default(uuid())
  userId      String
  total       Float
  method      PaymentMethod
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  items       SaleItem[]

  @@map("sales")
}

model SaleItem {
  id          String   @id @default(uuid())
  saleId      String
  serviceId   String
  quantity    Int      @default(1)

  sale        Sale     @relation(fields: [saleId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])

  @@map("sale_items")
}

model CashRegisterSession {
  id            String   @id @default(uuid())
  openedById    String
  openedAt      DateTime @default(now())
  closedAt      DateTime?
  initialAmount Float
  finalAmount   Float?

  user          User     @relation(fields: [openedById], references: [id])

  @@map("cash_register_sessions")
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discount    Float
  imageUrl    String?
  createdAt   DateTime @default(now())

  @@map("coupons")
}
