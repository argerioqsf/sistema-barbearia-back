// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  active   Boolean  @default(false)
  profile  Profile?

  @@map("users")
}

model Profile {
  id              String            @id @default(uuid())
  phone           String
  cpf             String
  genre           String
  birthday        String
  pix             String
  role            Role              @default(indicator)
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  leadsIndicator  Leads[]           @relation(name: "indicatorLeads")
  leadsConsultant Leads[]           @relation(name: "consultantLeads")
  city            String?
  extract_profile extract_profile[]

  @@map("profiles")
}

model Segment {
  id      String          @id @default(uuid())
  name    String
  units   UnitSegment[]
  courses CourseSegment[]

  @@map("segments")
}

model UnitSegment {
  segment   Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId String
  unit      Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId    String

  @@id([segmentId, unitId])
  @@map("unit_segment")
}

model CourseSegment {
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId  String
  segment   Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId String

  @@id([segmentId, courseId])
  @@map("course_segment")
}

model Course {
  id       String          @id @default(uuid())
  name     String
  active   Boolean
  units    UnitCourses[]
  timeline Timeline[]
  segments CourseSegment[]

  @@map("courses")
}

model Unit {
  id       String        @id @default(uuid())
  name     String
  courses  UnitCourses[]
  segments UnitSegment[]
  Leads    Leads[]

  @@map("units")
}

model UnitCourses {
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String
  unit     Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId   String

  @@id([courseId, unitId])
  @@map("unit_courses")
}

model Timeline {
  id          String @id @default(uuid())
  title       String
  description String
  status      String
  lead        Leads  @relation(fields: [leadsId], references: [id])
  leadsId     String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId    String

  @@map("timeline")
}

model Leads {
  id           String     @id @default(uuid())
  name         String
  phone        String
  document     String
  email        String
  city         String
  archived     Boolean    @default(false)
  indicator    Profile    @relation(fields: [indicatorId], references: [id], name: "indicatorLeads")
  indicatorId  String
  consultant   Profile?   @relation(fields: [consultantId], references: [id], name: "consultantLeads")
  consultantId String?
  unit         Unit       @relation(fields: [unitId], references: [id])
  unitId       String
  timeline     Timeline[]

  @@map("leads")
}

model extract_profile {
  id             String   @id @default(uuid())
  amount_receive Float
  profile        Profile? @relation(fields: [profileId], references: [id])
  profileId      String?

  @@map("extract_profile")
}

enum Role {
  administrator
  consultant
  indicator
  coordinator
  financial
}
