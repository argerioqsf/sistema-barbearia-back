generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BARBER
  CLIENT
  ATTENDANT
  OWNER
}

enum PaymentMethod {
  CASH
  PIX
  CREDIT_CARD
  DEBIT_CARD
}

enum TransactionType {
  ADDITION
  WITHDRAWAL
}

enum DiscountType {
  PERCENTAGE
  VALUE
}

model User {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  active              Boolean               @default(false)
  organizationId      String
  unitId              String
  profile             Profile?
  appointments        Appointment[]         @relation("ClientAppointments")
  barberAppointments  Appointment[]         @relation("BarberAppointments")
  sales               Sale[]
  saleItems           SaleItem[]
  transactions        Transaction[]
  sessions            CashRegisterSession[]
  passwordResetTokens PasswordResetToken[]
  ownedOrganizations  Organization[]        @relation("OrganizationOwner")
  createdAt           DateTime              @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  unit         Unit         @relation(fields: [unitId], references: [id])

  @@map("users")
}

model Profile {
  id                   String   @id @default(uuid())
  phone                String
  cpf                  String
  genre                String
  birthday             String
  pix                  String
  role                 Role     @default(CLIENT)
  commissionPercentage Float    @default(100)
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())

  @@map("profiles")
}

model Appointment {
  id        String   @id @default(uuid())
  clientId  String
  barberId  String
  serviceId String
  unitId    String
  date      DateTime
  hour      String

  client  User    @relation("ClientAppointments", fields: [clientId], references: [id])
  barber  User    @relation("BarberAppointments", fields: [barberId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  unit    Unit    @relation(fields: [unitId], references: [id])

  @@map("appointments")
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?
  imageUrl     String?
  cost         Float
  price        Float
  isProduct    Boolean       @default(false)
  unitId       String
  appointments Appointment[]
  saleItems    SaleItem[]

  unit Unit @relation(fields: [unitId], references: [id])

  @@map("services")
}

model Transaction {
  id          String          @id @default(uuid())
  userId      String
  unitId      String
  cashRegisterSessionId String?
  type        TransactionType
  description String
  amount      Float
  createdAt   DateTime        @default(now())

  sale Sale?

  user User @relation(fields: [userId], references: [id])
  unit Unit @relation(fields: [unitId], references: [id])
  session CashRegisterSession? @relation(fields: [cashRegisterSessionId], references: [id])

  @@map("transactions")
}

model Sale {
  id        String        @id @default(uuid())
  userId    String
  unitId    String
  sessionId String?
  couponId  String?
  transactionId String @unique
  total     Float
  method    PaymentMethod
  createdAt DateTime      @default(now())

  user   User       @relation(fields: [userId], references: [id])
  items  SaleItem[]
  unit   Unit       @relation(fields: [unitId], references: [id])
  coupon Coupon?    @relation(fields: [couponId], references: [id])
  session CashRegisterSession? @relation(fields: [sessionId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("sales")
}

model SaleItem {
  id        String @id @default(uuid())
  saleId    String
  serviceId String
  quantity  Int    @default(1)
  barberId  String?
  couponId  String?
  price     Float?

  sale    Sale    @relation(fields: [saleId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  barber  User?   @relation(fields: [barberId], references: [id])
  coupon  Coupon? @relation(fields: [couponId], references: [id])

  @@map("sale_items")
}

model CashRegisterSession {
  id            String    @id @default(uuid())
  openedById    String
  unitId        String
  openedAt      DateTime  @default(now())
  closedAt      DateTime?
  initialAmount Float
  finalAmount   Float?

  user User @relation(fields: [openedById], references: [id])
  unit Unit @relation(fields: [unitId], references: [id])
  sales Sale[]
  transactions Transaction[]

  @@map("cash_register_sessions")
}

model Coupon {
  id           String       @id @default(uuid())
  code         String       @unique
  description  String?
  discount     Float
  discountType DiscountType @default(PERCENTAGE)
  imageUrl     String?
  quantity     Int          @default(0)
  createdAt    DateTime     @default(now())
  sales        Sale[]
  saleItems    SaleItem[]

  @@map("coupons")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  ownerId   String?
  owner     User?    @relation("OrganizationOwner", fields: [ownerId], references: [id])
  users     User[]
  units     Unit[]
  createdAt DateTime @default(now())

  @@map("organizations")
}

model Unit {
  id             String                @id @default(uuid())
  name           String
  organizationId String
  services       Service[]
  appointments   Appointment[]
  sales          Sale[]
  transactions   Transaction[]
  sessions       CashRegisterSession[]
  users          User[]

  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("units")
}
